(window.webpackJsonp=window.webpackJsonp||[]).push([[32],{332:function(a,t,e){"use strict";e.r(t);var s=e(10),r=Object(s.a)({},(function(){var a=this,t=a._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h1",{attrs:{id:"calibration"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#calibration"}},[a._v("#")]),a._v(" Calibration")]),a._v(" "),t("p",[a._v("Calibration is done with the Kalibr toolkit. Ensure that all edge servers are listed in "),t("a",{attrs:{href:"/HOSTS"}},[t("code",[a._v("HOSTS")])]),a._v(". Do NOT move any of the cameras physically during this process.")]),a._v(" "),t("h2",{attrs:{id:"installation"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#installation"}},[a._v("#")]),a._v(" Installation")]),a._v(" "),t("p",[a._v("Install "),t("code",[a._v("kalibr")]),a._v(" following this "),t("a",{attrs:{href:"https://iqr.cs.yale.edu/docs/computer-vision/kalibr.html",target:"_blank",rel:"noopener noreferrer"}},[a._v("doc"),t("OutboundLink")],1),a._v(".")]),a._v(" "),t("p",[a._v("Install the dependencies for this module by running "),t("code",[a._v("python ../host.py edge_scripts/calibration_dependencies.sh")]),a._v(". This script assumes you have "),t("code",[a._v("uv")]),a._v(" properly configured.")]),a._v(" "),t("h2",{attrs:{id:"dataset-creation"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#dataset-creation"}},[a._v("#")]),a._v(" Dataset Creation")]),a._v(" "),t("ol",[t("li",[a._v("Run "),t("code",[a._v("python ../host.py edge_scripts/capture_images.sh")]),a._v(". While this is running, make sure to move the calibration target around for about 20 seconds.")]),a._v(" "),t("li",[a._v("Update the local path and SSH keys as necessary in  "),t("a",{attrs:{href:"/edge_scripts/transfer_images.sh"}},[t("code",[a._v("edge_scripts/transfer_images.sh")])])]),a._v(" "),t("li",[a._v("Run "),t("code",[a._v("python ../host.py edge_scripts/transfer_images.sh")]),a._v(". If images are still being captured, the script will error and tell you.")]),a._v(" "),t("li",[a._v("Run "),t("code",[a._v("python rename.py")])]),a._v(" "),t("li",[a._v("Set the "),t("code",[a._v("FOLDER")]),a._v(" env var to the absolute path of the local "),t("code",[a._v("dataset")]),a._v(" directory")]),a._v(" "),t("li",[a._v("Run the following to enter the "),t("code",[a._v("kalibr")]),a._v(" Docker container terminal. Keep this open in a terminal window."),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[a._v("xhost +local:root\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("docker")]),a._v(" run "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-it")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-e")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"DISPLAY"')]),a._v(" "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-e")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"QT_X11_NO_MITSHM=1"')]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("\\")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-v")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"/tmp/.X11-unix:/tmp/.X11-unix:rw"')]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("\\")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-v")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"'),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$FOLDER")]),a._v(':/data"')]),a._v(" kalibr\n")])])])]),a._v(" "),t("li",[a._v("Run the following inside the "),t("code",[a._v("kalibr")]),a._v(" container:"),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("source")]),a._v(" devel/setup.bash\nrosrun kalibr kalibr_bagcreater "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("--folder")]),a._v(" /data/ --output-bag /data/dataset.bag\n")])])])])]),a._v(" "),t("h2",{attrs:{id:"calibration-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#calibration-2"}},[a._v("#")]),a._v(" Calibration")]),a._v(" "),t("ol",[t("li",[a._v("Generate the calibration command by running "),t("code",[a._v("python generate_calibration_command.py")])]),a._v(" "),t("li",[a._v("Run this command inside the "),t("code",[a._v("kalibr")]),a._v(" container")]),a._v(" "),t("li",[a._v("The calibration results will available at "),t("code",[a._v("dataset/dataset-camchain.yaml")]),a._v(". "),t("code",[a._v("T_cn_cnm1")]),a._v(" is the transformation matrix to the "),t("strong",[a._v("previous")]),a._v(" camera's coordinate system. Keep this in mind when calculating final transformation matrices.")]),a._v(" "),t("li",[a._v("In "),t("code",[a._v("/src/pcs-multicamera-optimized.cpp")]),a._v(", adjust the "),t("code",[a._v("transform")]),a._v(" array as necessary. Make sure to rebuild before running.")])])])}),[],!1,null,null,null);t.default=r.exports}}]);