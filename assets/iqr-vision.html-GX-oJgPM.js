import{_ as n,c as a,a as e,o as t}from"./app-DmUoL6Xh.js";const i={};function l(p,s){return t(),a("div",null,s[0]||(s[0]=[e(`<h1 id="iqr-vision-utilities" tabindex="-1"><a class="header-anchor" href="#iqr-vision-utilities"><span>IQR Vision Utilities</span></a></h1><p>This is a collection of Python utility packages for use with the IQR Vision system. Although much of the code is specific to IQR Lab&#39;s setup, the code is generally useful for similar Realsense camera + edge node systems (see more details <a href="https://iqr.cs.yale.edu/docs/#edge-camera-systems" target="_blank" rel="noopener noreferrer">here</a>).</p><h2 id="installation" tabindex="-1"><a class="header-anchor" href="#installation"><span>Installation</span></a></h2><ol><li><p>Install GNU Parallel <code>gnu-parallel</code> on your computer and all the edge nodes:</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> parallel</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p>Create a <code>.env</code> in your root directory following <code>.env.example</code>.</p></li><li><p>Ensure that you can <code>ssh</code> into each specificied host in the <code>HOSTS</code> variable with the following command format:</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">ssh</span> <span class="token punctuation">[</span>hostname<span class="token punctuation">]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div> <details><summary>SSH Config Details</summary><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">Host iqr-vision-1</span>
<span class="line">    HostName iqr-vision-1.local</span>
<span class="line">    User lab</span>
<span class="line">    IdentityFile ~/.ssh/iqr-vision-1</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details></li><li><p>Clone <a href="https://github.com/iqr-lab/iqr-vision" target="_blank" rel="noopener noreferrer">this repository</a> and run:</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">pip <span class="token function">install</span> <span class="token parameter variable">-e</span> <span class="token builtin class-name">.</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p>Each host should have <code>librealsense2</code> properly installed and have a camera connected. You can test this with the following command:</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">iqr-vision <span class="token builtin class-name">test</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>or if you prefer to use <code>runpy</code></p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">python <span class="token parameter variable">-m</span> iqr_vision.cli <span class="token builtin class-name">test</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Expected output for each host:</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">Connected devices:</span>
<span class="line"><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">[</span>USB<span class="token punctuation">]</span> Intel RealSense D455 s/n <span class="token punctuation">[</span><span class="token punctuation">..</span>.<span class="token punctuation">]</span>, update serial number: <span class="token punctuation">[</span><span class="token punctuation">..</span>.<span class="token punctuation">]</span>, firmware version: <span class="token punctuation">[</span><span class="token punctuation">..</span>.<span class="token punctuation">]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h2 id="usage" tabindex="-1"><a class="header-anchor" href="#usage"><span>Usage</span></a></h2><h3 id="multivideo" tabindex="-1"><a class="header-anchor" href="#multivideo"><span><code>multivideo</code></span></a></h3><p>This module is specifically used for rgb color related functions. See the relevant function documentation for more details.</p><p>You must first install the <code>iqr-multivideo</code> executable to the edge nodes. Please do this through the cli:</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">iqr-vision <span class="token function">install</span> multivideo</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Note: <strong>Ensure that you call <code>multivideo.close()</code> after <code>multivideo.start()</code></strong>. The start function is running an executable under the hood, which will terminate eventually on its own after the required duration, but subsequent runs will fail as the camera stream is already occupied. This is avoided by the <code>pre_stop: bool = True</code> parameter on the <code>multivideo.start()</code></p><p>Example usage:</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">from</span> pathlib <span class="token keyword">import</span> Path</span>
<span class="line"></span>
<span class="line"><span class="token keyword">from</span> iqr_vision <span class="token keyword">import</span> multivideo</span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="token keyword">def</span> <span class="token function">record_timestamps</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">import</span> time</span>
<span class="line"></span>
<span class="line">    timestamps<span class="token punctuation">:</span> <span class="token builtin">list</span><span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></span>
<span class="line">    before_loop <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">while</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> before_loop <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">:</span> <span class="token comment"># Record for 10 seconds</span></span>
<span class="line">        nano <span class="token operator">=</span> time<span class="token punctuation">.</span>time_ns<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        timestamps<span class="token punctuation">.</span>append<span class="token punctuation">(</span></span>
<span class="line">            <span class="token string-interpolation"><span class="token string">f&quot;</span><span class="token interpolation"><span class="token punctuation">{</span>nano <span class="token operator">//</span> <span class="token number">1_000_000_000</span><span class="token punctuation">}</span></span><span class="token string">.</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token builtin">str</span><span class="token punctuation">(</span>nano <span class="token operator">%</span> <span class="token number">1_000_000_000</span><span class="token punctuation">)</span><span class="token punctuation">.</span>zfill<span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span></span>
<span class="line">        <span class="token punctuation">)</span></span>
<span class="line">        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">0.05</span><span class="token punctuation">)</span>  <span class="token comment"># Record timestamps for every 50ms</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">return</span> timestamps</span>
<span class="line"></span>
<span class="line"></span>
<span class="line">pids <span class="token operator">=</span> multivideo<span class="token punctuation">.</span>start<span class="token punctuation">(</span>duration<span class="token operator">=</span><span class="token number">60</span><span class="token punctuation">,</span> bag_path<span class="token operator">=</span><span class="token string">&quot;~/test_dir/test.bag&quot;</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">timestamps <span class="token operator">=</span> record_timestamps<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">multivideo<span class="token punctuation">.</span>stop<span class="token punctuation">(</span>pids<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">multivideo<span class="token punctuation">.</span>transfer<span class="token punctuation">(</span>local_bag_dir<span class="token operator">=</span><span class="token string">&quot;bags/&quot;</span><span class="token punctuation">,</span> remote_bag_path<span class="token operator">=</span><span class="token string">&quot;~/test_dir/test.bag&quot;</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">multivideo<span class="token punctuation">.</span>docker_filter_rosbag<span class="token punctuation">(</span></span>
<span class="line">    local_bag_dir<span class="token operator">=</span><span class="token string">&quot;bags/&quot;</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">for</span> bag_path <span class="token keyword">in</span> Path<span class="token punctuation">(</span><span class="token string">&quot;bags/filtered_bags&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>glob<span class="token punctuation">(</span><span class="token string">&quot;*.bag&quot;</span><span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    multivideo<span class="token punctuation">.</span>save_rosbag_images<span class="token punctuation">(</span></span>
<span class="line">        local_bag_path<span class="token operator">=</span>bag_path<span class="token punctuation">,</span></span>
<span class="line">        destination_dir<span class="token operator">=</span><span class="token string-interpolation"><span class="token string">f&quot;images/</span><span class="token interpolation"><span class="token punctuation">{</span>bag_path<span class="token punctuation">.</span>stem<span class="token punctuation">}</span></span><span class="token string">/&quot;</span></span><span class="token punctuation">,</span></span>
<span class="line">        timestamps<span class="token operator">=</span>timestamps<span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="contributing" tabindex="-1"><a class="header-anchor" href="#contributing"><span>Contributing</span></a></h2><p>This is a relatively straightforward Python package, proceed with standard practices. Document functions with <a href="https://github.com/google/styleguide/blob/gh-pages/pyguide.md#38-comments-and-docstrings" target="_blank" rel="noopener noreferrer">Google format Python docstrings</a> and format code with <code>black</code>.</p>`,14)]))}const c=n(i,[["render",l]]),r=JSON.parse('{"path":"/computer-vision/iqr-vision.html","title":"IQR Vision Utilities","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"Installation","slug":"installation","link":"#installation","children":[]},{"level":2,"title":"Usage","slug":"usage","link":"#usage","children":[{"level":3,"title":"multivideo","slug":"multivideo","link":"#multivideo","children":[]}]},{"level":2,"title":"Contributing","slug":"contributing","link":"#contributing","children":[]}],"git":{"updatedTime":1744251327000,"contributors":[{"name":"Neil Song","email":"song.neil.song@gmail.com","commits":1,"url":"https://github.com/Neil Song"}]},"filePathRelative":"computer-vision/iqr-vision.md"}');export{c as comp,r as data};
