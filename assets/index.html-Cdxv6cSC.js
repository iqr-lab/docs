import{_ as e,a as n,b as s,o as t}from"./app-Bueb5E3k.js";const i={};function l(r,a){return t(),n("div",null,a[0]||(a[0]=[s(`<h1 id="calibration" tabindex="-1"><a class="header-anchor" href="#calibration"><span>Calibration</span></a></h1><p>Calibration is done with the Kalibr toolkit. Ensure that all edge servers are listed in <a href="/HOSTS" target="_blank" rel="noopener noreferrer"><code>HOSTS</code></a>. Do NOT move any of the cameras physically during this process.</p><h2 id="installation" tabindex="-1"><a class="header-anchor" href="#installation"><span>Installation</span></a></h2><p>Install <code>kalibr</code> following this <a href="https://iqr.cs.yale.edu/docs/computer-vision/kalibr.html" target="_blank" rel="noopener noreferrer">doc</a>.</p><p>Install the dependencies for this module by running <code>python ../host.py edge_scripts/calibration_dependencies.sh</code>. This script assumes you have <code>uv</code> properly configured.</p><h2 id="dataset-creation" tabindex="-1"><a class="header-anchor" href="#dataset-creation"><span>Dataset Creation</span></a></h2><ol><li>Run <code>python ../host.py edge_scripts/capture_images.sh</code>. While this is running, make sure to move the calibration target around for about 20 seconds.</li><li>Update the local path and SSH keys as necessary in <a href="/edge_scripts/transfer_images.sh" target="_blank" rel="noopener noreferrer"><code>edge_scripts/transfer_images.sh</code></a></li><li>Run <code>python ../host.py edge_scripts/transfer_images.sh</code>. If images are still being captured, the script will error and tell you.</li><li>Run <code>python rename.py</code></li><li>Set the <code>FOLDER</code> env var to the absolute path of the local <code>dataset</code> directory</li><li>Run the following to enter the <code>kalibr</code> Docker container terminal. Keep this open in a terminal window.<div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">xhost +local:root</span>
<span class="line"><span class="token function">docker</span> run <span class="token parameter variable">-it</span> <span class="token parameter variable">-e</span> <span class="token string">&quot;DISPLAY&quot;</span> <span class="token parameter variable">-e</span> <span class="token string">&quot;QT_X11_NO_MITSHM=1&quot;</span> <span class="token punctuation">\\</span></span>
<span class="line">    <span class="token parameter variable">-v</span> <span class="token string">&quot;/tmp/.X11-unix:/tmp/.X11-unix:rw&quot;</span> <span class="token punctuation">\\</span></span>
<span class="line">    <span class="token parameter variable">-v</span> <span class="token string">&quot;<span class="token variable">$FOLDER</span>:/data&quot;</span> kalibr</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li>Run the following inside the <code>kalibr</code> container:<div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token builtin class-name">source</span> devel/setup.bash</span>
<span class="line">rosrun kalibr kalibr_bagcreater <span class="token parameter variable">--folder</span> /data/ --output-bag /data/dataset.bag</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h2 id="calibration-1" tabindex="-1"><a class="header-anchor" href="#calibration-1"><span>Calibration</span></a></h2><ol><li>Generate the calibration command by running <code>python generate_calibration_command.py</code></li><li>Run this command inside the <code>kalibr</code> container</li><li>The calibration results will available at <code>dataset/dataset-camchain.yaml</code>. <code>T_cn_cnm1</code> is the transformation matrix to the <strong>previous</strong> camera&#39;s coordinate system. Keep this in mind when calculating final transformation matrices.</li><li>In <code>/src/pcs-multicamera-optimized.cpp</code>, adjust the <code>transform</code> array as necessary. Make sure to rebuild before running.</li></ol>`,9)]))}const c=e(i,[["render",l],["__file","index.html.vue"]]),d=JSON.parse('{"path":"/pointcloud_stitching/calibration/","title":"Calibration","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"Installation","slug":"installation","link":"#installation","children":[]},{"level":2,"title":"Dataset Creation","slug":"dataset-creation","link":"#dataset-creation","children":[]},{"level":2,"title":"Calibration","slug":"calibration-1","link":"#calibration-1","children":[]}],"git":{},"filePathRelative":"pointcloud_stitching/calibration/README.md"}');export{c as comp,d as data};
