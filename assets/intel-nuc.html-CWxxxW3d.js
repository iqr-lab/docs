import{_ as n,a as s,b as a,o as t}from"./app-Cb7Gj5tc.js";const i={};function l(o,e){return t(),s("div",null,e[0]||(e[0]=[a(`<h1 id="intel-nuc" tabindex="-1"><a class="header-anchor" href="#intel-nuc"><span>Intel NUC</span></a></h1><p>This document covers all initial setup details for each NUC edge device in the distributed pointcloud stitching system.</p><h2 id="prerequisite" tabindex="-1"><a class="header-anchor" href="#prerequisite"><span>Prerequisite</span></a></h2><ol><li>Disable Secure Boot in UEFI (F2 hotkey at POST)</li><li>Enable Display Emulation under Advanced -&gt; Video in UEFI</li><li>An Internet Connection</li></ol><h2 id="ubuntu" tabindex="-1"><a class="header-anchor" href="#ubuntu"><span>Ubuntu</span></a></h2><p>As of the time of writing, it is simplest to install <a href="https://old-releases.ubuntu.com/releases/22.04.3/" target="_blank" rel="noopener noreferrer">Ubuntu 22.04.3</a> specifically. This is because it comes installed with kernel 6.2, which is by default supported by the Intel Realsense distribution builds. It is safest to avoid updating system components and software after initial OS installation, since <code>librealsense</code> is dependent on kernel modules and RustDesk uses virtual display emulation.</p><h2 id="intel-realsense" tabindex="-1"><a class="header-anchor" href="#intel-realsense"><span>Intel Realsense</span></a></h2><p>Ensure that your kernel version (<code>uname -r</code>) is supported by the <code>librealsense-dkms</code> package <a href="https://github.com/IntelRealSense/librealsense/blob/master/doc/distribution_linux.md#using-pre-build-packages" target="_blank" rel="noopener noreferrer">here</a>.</p><p>If not, please follow the following section on downgrading your kernel <strong>BEFORE</strong> installing <code>librealsense</code>.</p><p>Please install <code>librealsense</code> from distribution following <a href="https://iqr.cs.yale.edu/docs/computer-vision/intel-realsense.html" target="_blank" rel="noopener noreferrer">Intel Realsense</a>. Note the manual installation step required for NUCs only.</p><h2 id="kernel-downgrade" tabindex="-1"><a class="header-anchor" href="#kernel-downgrade"><span>Kernel Downgrade</span></a></h2><ol><li><p>Install Mainline</p><blockquote><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">sudo</span> apt-add-repository <span class="token parameter variable">-y</span> ppa:cappelikan/ppa</span>
<span class="line"></span>
<span class="line"><span class="token function">sudo</span> <span class="token function">apt</span> update</span>
<span class="line"></span>
<span class="line"><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> mainline</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote></li><li><p>Install the downgraded kernel via the Mainline GUI App</p></li><li><p>Reboot and hold <code>Esc</code> to access the GRUB menu</p><p>Hint: If you held <code>Esc</code> for too long (which is very likely), you will enter the GRUB prompt instead. Execute <code>normal</code>, then tap <code>Esc</code> until the menu shows up</p></li><li><p>Boot from the downgraded kernel in the Advanced Ubuntu Boot Options</p></li><li><p>Uninstall any newer kernels from Mainline so that Ubuntu boots to the downgraded kernel by default.</p><p>Hint: You may need to uninstall some <code>generic-hwe</code> image/headers packages before this step. If this is the case, use</p><blockquote><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">dpkg <span class="token parameter variable">--list</span> <span class="token operator">|</span> <span class="token function">grep</span> linux-image <span class="token comment"># to find the exact package name of linux-image-xxx</span></span>
<span class="line"><span class="token function">sudo</span> <span class="token function">apt-get</span> purge linux-image-xxx</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></blockquote></li></ol><h2 id="networking" tabindex="-1"><a class="header-anchor" href="#networking"><span>Networking</span></a></h2><p>We establish <strong><code>i</code></strong> as the corresponding device number, indexed by 1.</p><p>Ensure that the ethernet cable is connected to a port with a native <code>Vision Subnet</code> tag. For exact port mappings, please check the UniFi controller configuration. As of the time of writing, the top row of the 2.5Gbps ports are all natively tagged to the <code>Vision Subnet</code></p><h3 id="ip-address-assignment" tabindex="-1"><a class="header-anchor" href="#ip-address-assignment"><span>IP Address Assignment</span></a></h3><p>The easiest way to configure manual IP assignment is through the Settings app. Please configure a wired IPv4 profile with the following specs:</p><ul><li>IPv4 Method: Manual</li><li>Address: <code>192.168.2.[7 + i]</code></li><li>Netmask: <code>255.255.255.0</code></li><li>Gateway: <code>192.168.2.1</code></li></ul><h3 id="hostname" tabindex="-1"><a class="header-anchor" href="#hostname"><span>Hostname</span></a></h3><p>For ease of access, please configure the hostname as necessary.</p><blockquote><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">hostnamectl set-hostname iqr-vision-i</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></blockquote><p>Additionally, you may find it beneficial down the line to physically label the NUCs with their corresponding index. Please use the label maker as necessary.</p><h2 id="remote-access" tabindex="-1"><a class="header-anchor" href="#remote-access"><span>Remote Access</span></a></h2><h3 id="ssh" tabindex="-1"><a class="header-anchor" href="#ssh"><span>SSH</span></a></h3><p>Please follow standard SSH key generation (<code>ssh-keygen</code>) and installation methods (<code>ssh-copy-id</code>). Since we have already set the hostname, it should be used as <code>iqr-vision-i.local</code> when using <code>ssh</code>.</p><p>Please also modify <code>~/.ssh/config</code> with the proper host configuration. Doing this avoids having to specify the SSH key in the <code>ssh</code> connect command. This is an important step as the <code>host.py</code> utility assumes this.</p><p>If you are expecting to do active development on <code>pointcloud_stitching</code>, please see <a href="https://iqr.cs.yale.edu/docs/computer-vision/pointcloud-stitching.html#camera-edge-server" target="_blank" rel="noopener noreferrer">this section</a> on setting up the central computer FS mount.</p><h3 id="remote-desktop" tabindex="-1"><a class="header-anchor" href="#remote-desktop"><span>Remote Desktop</span></a></h3><p>The remote desktop software of choice is RustDesk.</p><p>There are variety of reasons for this choice over AnyDesk but the following are the critical ones:</p><ul><li>Virtual Display Compatibility <ul><li>AnyDesk throws an Unsupported Display Server error under headless operation</li></ul></li><li>Speed &amp; Performance <ul><li>RustDesk empirically displays significantly lower input latency and higher visual quality</li></ul></li></ul><h4 id="installation-configuration" tabindex="-1"><a class="header-anchor" href="#installation-configuration"><span>Installation &amp; Configuration</span></a></h4><ol><li><p>Follow the <a href="https://rustdesk.com/docs/en/client/linux/" target="_blank" rel="noopener noreferrer">reference install steps</a></p></li><li><p>Once installed, open RustDesk and set a permanent password under the Security tab</p><p>Hint: It is usually set to the <code>lab</code> password but capatalized</p></li><li><p><a href="https://rustdesk.com/docs/en/client/linux/#login-screen" target="_blank" rel="noopener noreferrer">Disable Wayland login</a></p></li></ol><h2 id="environment-setup" tabindex="-1"><a class="header-anchor" href="#environment-setup"><span>Environment setup</span></a></h2><p>Although most of the choices here are a matter of personal perference from experience, it is best to make all edge device environments consistent to avoid unnecessary headaches.</p><h3 id="shell" tabindex="-1"><a class="header-anchor" href="#shell"><span>Shell</span></a></h3><p>The shell of choice is <code>fish</code>. Please install <code>fish</code> following the instructions <a href="https://launchpad.net/~fish-shell/+archive/ubuntu/release-3" target="_blank" rel="noopener noreferrer">here</a>. To set it as the default shell, run <code>chsh -s $(which fish)</code> inside <code>bash</code>.</p><p>To make <code>fish</code> more extensible, we additionally install Oh My Fish (<code>omf</code>) and Bass. Please install sequentially by following instructions <a href="https://github.com/oh-my-fish/oh-my-fish?tab=readme-ov-file#installation" target="_blank" rel="noopener noreferrer">here</a> then <a href="https://github.com/edc/bass?tab=readme-ov-file#with-oh-my-fish" target="_blank" rel="noopener noreferrer">here</a>.</p><h3 id="python" tabindex="-1"><a class="header-anchor" href="#python"><span>Python</span></a></h3><p>For Python, there is no need to complicate the installation environments of the edge device with <code>conda</code>. The <code>python3</code> interpreter should automatically be installed from the distribution package manager.</p><p>Please note that <code>python</code> does not and should not resolve (unless the virtual environment is activated).</p><h3 id="uv" tabindex="-1"><a class="header-anchor" href="#uv"><span>UV</span></a></h3><h4 id="installation-configuration-1" tabindex="-1"><a class="header-anchor" href="#installation-configuration-1"><span>Installation &amp; Configuration</span></a></h4><p>We use <code>uv</code> over <code>pip</code> as the Python package manager of choice. Please install it by following the instructions <a href="https://github.com/astral-sh/uv?tab=readme-ov-file#getting-started" target="_blank" rel="noopener noreferrer">here</a>.</p><p>Please restart your shell session for <code>uv</code> to be available.</p><h3 id="usage" tabindex="-1"><a class="header-anchor" href="#usage"><span>Usage</span></a></h3><p>As a general rule of thumb, create virtual environments whenever starting new Python projects. The location of the virtual environment is up to your discretion, but do create meaningful names for them.</p><p>For example, the calibration Python venv is named <code>~/calibration_venv</code>. Specify the name of the venv upon creation like so:</p><blockquote><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">uv venv <span class="token punctuation">[</span>venv_path<span class="token punctuation">]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></blockquote><p>Activate the desired virtual venv when needed like so:</p><blockquote><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token builtin class-name">source</span> <span class="token punctuation">[</span>venv_path<span class="token punctuation">]</span>/bin/activate.fish</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></blockquote><h2 id="conclusion" tabindex="-1"><a class="header-anchor" href="#conclusion"><span>Conclusion</span></a></h2><p>Upon successful setup, make sure to update <code>pointcloud_stitching/HOSTS</code> with the new hostname.</p>`,53)]))}const c=n(i,[["render",l],["__file","intel-nuc.html.vue"]]),d=JSON.parse('{"path":"/computer-vision/intel-nuc.html","title":"Intel NUC","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"Prerequisite","slug":"prerequisite","link":"#prerequisite","children":[]},{"level":2,"title":"Ubuntu","slug":"ubuntu","link":"#ubuntu","children":[]},{"level":2,"title":"Intel Realsense","slug":"intel-realsense","link":"#intel-realsense","children":[]},{"level":2,"title":"Kernel Downgrade","slug":"kernel-downgrade","link":"#kernel-downgrade","children":[]},{"level":2,"title":"Networking","slug":"networking","link":"#networking","children":[{"level":3,"title":"IP Address Assignment","slug":"ip-address-assignment","link":"#ip-address-assignment","children":[]},{"level":3,"title":"Hostname","slug":"hostname","link":"#hostname","children":[]}]},{"level":2,"title":"Remote Access","slug":"remote-access","link":"#remote-access","children":[{"level":3,"title":"SSH","slug":"ssh","link":"#ssh","children":[]},{"level":3,"title":"Remote Desktop","slug":"remote-desktop","link":"#remote-desktop","children":[]}]},{"level":2,"title":"Environment setup","slug":"environment-setup","link":"#environment-setup","children":[{"level":3,"title":"Shell","slug":"shell","link":"#shell","children":[]},{"level":3,"title":"Python","slug":"python","link":"#python","children":[]},{"level":3,"title":"UV","slug":"uv","link":"#uv","children":[]},{"level":3,"title":"Usage","slug":"usage","link":"#usage","children":[]}]},{"level":2,"title":"Conclusion","slug":"conclusion","link":"#conclusion","children":[]}],"git":{"updatedTime":1739246249000,"contributors":[{"name":"Neil Song","email":"song.neil.song@gmail.com","commits":1,"url":"https://github.com/Neil Song"}]},"filePathRelative":"computer-vision/intel-nuc.md"}');export{c as comp,d as data};
